import logging
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –†–æ—É—Ç–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
test_router = Router()

# --- FSM States –¥–ª—è —Ç–µ—Å—Ç–∞ ---
class TestStates(StatesGroup):
    question1 = State()
    question2 = State()
    question3 = State()
    question4 = State()
    question5 = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
start_test_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üß© –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")]],
    resize_keyboard=True
)

q1_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="1Ô∏è‚É£ –ó–∏–º–æ–π –ª–µ—Å —Å–ø–∏—Ç")],
        [KeyboardButton(text="2Ô∏è‚É£ –ñ–∏–∑–Ω—å –≤ –ª–µ—Å—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è")],
        [KeyboardButton(text="3Ô∏è‚É£ –õ–µ—Å –∫—Ä–∞—Å–∏–≤—ã–π")]
    ],
    resize_keyboard=True
)

q2_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="1Ô∏è‚É£ –£—Å—Ç–Ω–æ")],
        [KeyboardButton(text="2Ô∏è‚É£ –ü–∏—Å—å–º–µ–Ω–Ω–æ")],
        [KeyboardButton(text="3Ô∏è‚É£ –û–¥–∏–Ω–∞–∫–æ–≤–æ")]
    ],
    resize_keyboard=True
)

q3_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–æ—á–∏–Ω–µ–Ω–∏–µ")],
        [KeyboardButton(text="–ü–µ—Ä–µ—Å–∫–∞–∑")],
        [KeyboardButton(text="–ö–≤–∞–¥—Ä–∞—Ç")]
    ],
    resize_keyboard=True
)

q4_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="1Ô∏è‚É£ –ù–∞—á–∞—Ç—å")],
        [KeyboardButton(text="2Ô∏è‚É£ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å)")],
        [KeyboardButton(text="3Ô∏è‚É£ –ó–∞–∫–æ–Ω—á–∏—Ç—å")]
    ],
    resize_keyboard=True
)

def get_main_keyboard_with_test():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π —Ç–µ—Å—Ç–∞"""
    from bot import get_main_keyboard
    return get_main_keyboard()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
async def log_test_result_to_db(user, answers, level):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –≤ –ë–î"""
    try:
        from bot import get_db_connection
        conn = await get_db_connection()
        if not conn:
            return

        answers_text = f"Q1: {answers.get('q1', 'N/A')}, Q2: {answers.get('q2', 'N/A')}, Q3: {answers.get('q3', 'N/A')}, Q4: {answers.get('q4', 'N/A')}, Q5: {answers.get('q5', 'N/A')}"

        await conn.execute('''
            INSERT INTO mss_chat (user_id, username, message_text, message_type)
            VALUES ($1, $2, $3, $4)
        ''', user.id, user.username, f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ - –£—Ä–æ–≤–µ–Ω—å: {level}. –û—Ç–≤–µ—Ç—ã: {answers_text}", "test_result")

    except Exception as e:
        logging.error(f"Error logging test result to database: {e}")
    finally:
        if conn:
            await conn.close()

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@test_router.message(F.text == "üß© –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —É—Ä–æ–≤–Ω—è")
async def start_test(message: Message, state: FSMContext):
    from bot import add_user_to_db, log_message_to_db
    await add_user_to_db(message.from_user)
    await log_message_to_db(message.from_user, message.text, "test_start")

    await state.clear()
    await state.set_state(TestStates.question1)

    await message.answer(
        "üß© –¢–µ—Å—Ç —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ä–µ—á—å—é\n\n"
        "–≠—Ç–æ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞.\n\n"
        "–í–æ–ø—Ä–æ—Å 1 –∏–∑ 5\n\n"
        "¬´–ó–∏–º–æ–π –ª–µ—Å –∫–∞–∂–µ—Ç—Å—è —Å–ø—è—â–∏–º, –Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∂–∏–∑–Ω—å –≤ –Ω–µ–º –Ω–µ –∑–∞–º–∏—Ä–∞–µ—Ç¬ª.\n\n"
        "–ß—Ç–æ –∑–¥–µ—Å—å —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ?",
        reply_markup=q1_kb
    )

@test_router.message(TestStates.question1, F.text.in_(["1Ô∏è‚É£ –ó–∏–º–æ–π –ª–µ—Å —Å–ø–∏—Ç", "2Ô∏è‚É£ –ñ–∏–∑–Ω—å –≤ –ª–µ—Å—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è", "3Ô∏è‚É£ –õ–µ—Å –∫—Ä–∞—Å–∏–≤—ã–π"]))
async def question1_handler(message: Message, state: FSMContext):
    await state.update_data(q1=message.text)
    await state.set_state(TestStates.question2)

    await message.answer(
        "–í–æ–ø—Ä–æ—Å 2 –∏–∑ 5\n\n"
        "–ö–∞–∫ –≤–∞–º –ø—Ä–æ—â–µ ‚Äî —É—Å—Ç–Ω–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏–ª–∏ –ø–∏—Å—å–º–µ–Ω–Ω–æ –ø–∏—Å–∞—Ç—å?",
        reply_markup=q2_kb
    )

@test_router.message(TestStates.question2, F.text.in_(["1Ô∏è‚É£ –£—Å—Ç–Ω–æ", "2Ô∏è‚É£ –ü–∏—Å—å–º–µ–Ω–Ω–æ", "3Ô∏è‚É£ –û–¥–∏–Ω–∞–∫–æ–≤–æ"]))
async def question2_handler(message: Message, state: FSMContext):
    await state.update_data(q2=message.text)
    await state.set_state(TestStates.question3)

    await message.answer(
        "–í–æ–ø—Ä–æ—Å 3 –∏–∑ 5\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—à–Ω–µ–µ —Å–ª–æ–≤–æ:\n–°–æ—á–∏–Ω–µ–Ω–∏–µ, –ü–µ—Ä–µ—Å–∫–∞–∑, –ö–≤–∞–¥—Ä–∞—Ç",
        reply_markup=q3_kb
    )

@test_router.message(TestStates.question3, F.text.in_(["–°–æ—á–∏–Ω–µ–Ω–∏–µ", "–ü–µ—Ä–µ—Å–∫–∞–∑", "–ö–≤–∞–¥—Ä–∞—Ç"]))
async def question3_handler(message: Message, state: FSMContext):
    await state.update_data(q3=message.text)
    await state.set_state(TestStates.question4)

    await message.answer(
        "–í–æ–ø—Ä–æ—Å 4 –∏–∑ 5\n\n"
        "–ß—Ç–æ —Ç—Ä—É–¥–Ω–µ–µ –≤—Å–µ–≥–æ –≤ —Å–æ—á–∏–Ω–µ–Ω–∏–∏?",
        reply_markup=q4_kb
    )

@test_router.message(TestStates.question4, F.text.in_(["1Ô∏è‚É£ –ù–∞—á–∞—Ç—å", "2Ô∏è‚É£ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å)", "3Ô∏è‚É£ –ó–∞–∫–æ–Ω—á–∏—Ç—å"]))
async def question4_handler(message: Message, state: FSMContext):
    await state.update_data(q4=message.text)
    await state.set_state(TestStates.question5)

    await message.answer(
        "–í–æ–ø—Ä–æ—Å 5 –∏–∑ 5\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, —á—Ç–æ –≤–∞–º –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ ‚úçÔ∏è\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        reply_markup=ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)
    )

@test_router.message(TestStates.question5)
async def finish_test(message: Message, state: FSMContext):
    from bot import add_user_to_db
    await add_user_to_db(message.from_user)

    await state.update_data(q5=message.text)
    data = await state.get_data()

    # --- –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è ---
    level = "–ù–æ–≤–∏—á–æ–∫"
    if data["q1"] == "2Ô∏è‚É£ –ñ–∏–∑–Ω—å –≤ –ª–µ—Å—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è" and data["q3"] == "–ö–≤–∞–¥—Ä–∞—Ç":
        if data["q4"] == "3Ô∏è‚É£ –ó–∞–∫–æ–Ω—á–∏—Ç—å":
            level = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
        else:
            level = "–£–≤–µ—Ä–µ–Ω–Ω—ã–π"

    # --- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ---
    if level == "–ù–æ–≤–∏—á–æ–∫":
        rec = ("üå± –í—ã —É–º–µ–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å —É—Å—Ç–Ω–æ, –Ω–æ –ø–∏—Å—å–º–µ–Ω–Ω–æ –ø–æ–∫–∞ —Ç—Ä—É–¥–Ω–æ –Ω–∞—á–∞—Ç—å. "
               "–ù–∞ –∫—É—Ä—Å–µ –º—ã –±—É–¥–µ–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å, –∫–∞–∫ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –º—ã—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç.\n\n"
               "üí° –°–æ–≤–µ—Ç –¥–æ –∫—É—Ä—Å–∞: ‚úçÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–≤–æ—ë–º –¥–Ω–µ.")
        emoji = "üå±"
    elif level == "–£–≤–µ—Ä–µ–Ω–Ω—ã–π":
        rec = ("üåø –£ –≤–∞—Å —É–∂–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–∏—Å–∞—Ç—å, –Ω–æ –∏–Ω–æ–≥–¥–∞ –ø—É—Ç–∞–µ—Ç–µ—Å—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ. "
               "–ú—ã –Ω–∞—É—á–∏–º—Å—è –±—ã—Å—Ç—Ä–æ –≤–∏–¥–µ—Ç—å –ø–ª–∞–Ω —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ç—Ä–æ–∏—Ç—å –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ.\n\n"
               "üí° –°–æ–≤–µ—Ç –¥–æ –∫—É—Ä—Å–∞: üìù –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∫ –ª—é–±–æ–º—É —Ç–µ–∫—Å—Ç—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –∏–∑ 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")
        emoji = "üåø"
    else:
        rec = ("üå≥ –í—ã –ª–µ–≥–∫–æ –≤—ã—Ä–∞–∂–∞–µ—Ç–µ –º—ã—Å–ª–∏, —Ç–µ–ø–µ—Ä—å –≤–∞–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏—Ö –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º–∏. "
               "–ù–∞ –∫—É—Ä—Å–µ –º—ã –æ—Å–≤–æ–∏–º —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ ¬´—É–∫—Ä–∞—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞¬ª.\n\n"
               "üí° –°–æ–≤–µ—Ç –¥–æ –∫—É—Ä—Å–∞: üé® –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–∞—Ñ–æ—Ä—É –∏–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —Ç–µ–∫—Å—Ç–µ.")
        emoji = "üå≥"

    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
    await log_test_result_to_db(message.from_user, data, level)

    result_text = f"""üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!

{emoji} –í–∞—à —É—Ä–æ–≤–µ–Ω—å: **{level}**

{rec}

üìö –ö—É—Ä—Å "–ò–∑–ª–∞–≥–∞–π —è—Å–Ω–æ" –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ä–µ—á–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è!

–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫—É—Ä—Å–µ? –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é."""

    await message.answer(result_text, reply_markup=get_main_keyboard_with_test(), parse_mode="Markdown")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–∞—Ö
@test_router.message(TestStates.question1)
@test_router.message(TestStates.question2)
@test_router.message(TestStates.question3)
@test_router.message(TestStates.question4)
async def invalid_test_answer(message: Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state == TestStates.question1:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=q1_kb)
    elif current_state == TestStates.question2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=q2_kb)
    elif current_state == TestStates.question3:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=q3_kb)
    elif current_state == TestStates.question4:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=q4_kb)